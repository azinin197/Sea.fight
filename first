from random import randint
#Классы исключений:
class BoardException(Exception):
    pass
class BoardOutException(BoardException):
    def __str__(self):
        return "Стрельба за пределы доски"
class BoardUserException(BoardException):
    def __str__(self):
        return "Вы стреляли в эту клетку"
class BoardWrongShipException(BoardException):
    pass
# точка на доске
class Dot:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    # проверяем равенство точек
    def __eq__(self, other):
        return self.x == other.x and self.y == other.y
    def __repr__(self):
        return f"({self.x}, {self.y})"
# класс корабля
class Ship:
    # сам корабль
    def __init__(self, bow, long, orient):
        # нос корабля
        self.bow = bow
        # длина
        self.long = long
        # ориентация
        self.orient = orient
        self.lives = 1
    # точки корабля
    @property
    def dots(self):
        dots_ship = []
        for i in range(self.long):
            # точки местонахождения
            cur_x = self.bow.x
            cur_y = self.bow.y
            if self.orient == 0:
                cur_x = cur_x + i
            elif self.orient == 1:
                cur_y = cur_y + i
            dots_ship.append(Dot(cur_x, cur_y))
        return dots_ship
    def shooten(self, shot):
        return self in self.dots
# Задаем игровое поле
class Field:
    def __init__(self, hid=False, size=8):
        self.hid = hid
        self.size = size
        self.count = 0
        self.playdesk = [["O"] * size for t in range(size)]
        self.busy = []
        self.ships = []
    def __str__(self):
        res = ""
        res = res + "  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |"
        for i, row in enumerate(self.playdesk):
            res = res + f"\n{i + 1} | " + " | ".join(row) + " | "
        if self.hid:
            res = res.replace("■", "O")
        return res
    def out(self, d):
        return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))
#Добавим контур корабля на доску
    def contour(self, ship, verb = False):
        near = [
            (-1, -1), (-1, 0), (-1, 1),
            (0, -1), (0, 0), (0, 1),
            (1, -1), (1, 0), (1, 1)
        ]
        for d in ship.dots:
            for dx, dy in near:
                cur = Dot(d.x + dx, d.y + dy)
                if not(self.out(cur)) and cur not in self.busy:
                    if verb:
                        self.playdesk[cur.x][cur.y] = "."
                    self.busy.append(cur)
    # ставим корабль на доску
    def add_ship(self, ship):
        for d in ship.dots:
            if self.out(d) or d in self.busy:
                raise BoardWrongShipException()
        for d in ship.dots:
            self.playdesk[d.x][d.y] = "■"
            self.busy.append(d)
        self.ships.append(ship)
        self.contour(ship)
    def shot(self, d):
        if self.out(d):
            raise BoardOutException()
        if d in self.busy:
            raise BoardUserException()
        self.busy.append(d)
        for ship in self.ships:
            if d in ship.dots:
                ship.lives = ship.lives - 1
                self.playdesk[d.x][d.y] = "@"
                if ship.lives == 0:
                    self.count = self.count + 1
                    self.contour(ship, verb= True)
                    print("Уничтожен")
                    return False
                else:
                    print("Ранен")
                    return True
        self.playdesk[d.x][d.y] = "."
        print("Промах")
        return False
    def begin(self):
        self.busy = []
class Player:
    def __init__(self, board, enemy):
        self.board = board
        self.enemy = enemy
    def ask(self):
        raise NotImplementedError()
    def move(self):
        while True:
            try:
                target = self.ask()
                repeat = self.enemy.shot(target)
                return repeat
            except BoardException as e:
                print(e)
class AI(Player):
    def ask(self):
        d = Dot(randint(0, 7), randint(0, 7))
        print(f"Ходит компьютер: {d.x + 1}{d.y + 1}")
        return d
class User(Player):
    def ask(self):
        while True:
            cords = input("Введите координаты:").split()

            if len(cords) != 2:
                print("Введите 2 координаты")
                continue
            x, y = cords
            if not (x.isdigit()) or not (y.isdigit()):
                print("Введите числа")
                continue
            break
        x, y = int(x), int(y)
        return Dot(x - 1, y - 1)
class Game:
    def Greet(self):
        print("-------------------------------------")
        print('Добро пожаловать в игру "Морской бой"')
        print("-------------------------------------")
        print("-------Формат ввода: x, y:-----------")
        print("--x- номер строки,y- номер столбца--")
    def __init__(self, size = 8):
        self.size = size
        player = self.random_board()
        computer = self.random_board()
        computer.hid = True
        self.ai = AI(computer, player)
        self.us = User(player, computer)
    def try_board(self):
        lens = [4, 3, 3, 2, 2, 1, 1, 1]
        board = Field(size = self.size)
        attempts = 0
        for long in lens:
            while True:
                attempts = attempts + 1
                ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), long, randint(0, 1))
                try:
                    board.add_ship(ship)
                    break
                except BoardWrongShipException:
                    pass
        board.begin()
        return board
    def random_board(self):
        board = None
        while board is None:
            board = self.try_board()
        return board
    #зададим цикл
    def loop(self):
        num = 0
        while True:
            print("-----------------------------------")
            print('Доска пользователя:')
            print(self.us.board)
            print("-----------------------------------")
            print("Доска соперника:")
            print(self.ai.board)
            print("-----------------------------------")
            if num % 2 == 0:
                print("Ваш ход!")
                repeat = self.us.move()
            else:
                print("Ходит соперник!")
                repeat = self.ai.move()
            if repeat:
                num = num - 1
            #проверка результата
            if self.us.board == len(self.ai.board.ships):
                print("-----------------------------------")
                print("Поздравляю, Вы победили!")
                print("-----------------------------------")
                break
            if self.ai.board == len(self.us.board.ships):
                print("-----------------------------------")
                print("Сожалею, Вы проиграли!")
                print("-----------------------------------")
                break
    def start(self):
        self.Greet()
        self.loop()
g = Game()
g.start()
